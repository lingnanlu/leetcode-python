'''
首先, 你感觉, 这题应该是利用角之间的关系来描述重叠关系, 那么, 首先要了解重叠的矩阵是什么样子的.
两矩阵重叠的话, 有几种情况呢?

1. 一角在另一个矩阵之内
2. 一个矩形在矩形在内
3. 两者平行的重叠.

也就是判断重叠, 其实就看是否是属于以上三种情况之一, 感觉有点麻烦. 怎么简化一下呢?

因为两个矩阵, 要不重叠, 要不不重叠, 所以, 看看不重叠是什么情况? 好像也比较复杂?

无论是直接判断重叠还是不重叠, 情况都比较多, 我感觉自己很容易出错.

好了, 现在最直接的想法有点问题了, 那么,我们就要想, 能不能想到一个简化的问题, 一个类似的简化的问题?

因为这是二维的, 一个类似的简化的问题就是, 在一维上, 给出两个线段, 判断其是否重叠.
这个问题是简单的, 那么, 再回到二维上面, 你能利用一维的方法么?
把矩阵投影到x, y轴可以么? 我觉得可以
就是把一个二维的转化成两个一维的.

啊哈, 灵机一动!:
人脑其实不太善于处理多维问题, 这里通过相到一个一维的类似问题, 从而将二维转化成一维, 从而找到了突破点.
'''
class Solution:
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:

        # 判断x轴和y轴的投影都重叠.

        # 先判断x轴是否重叠
        rec1_x = (rec1[0], rec1[2])
        rec2_x = (rec2[0], rec2[2])

        # 判断一维重叠也不是太方便, 但可以判断一维不重叠
        # 就是一个线段的右小于等于右
        x_not_overlap = rec1_x[1] <= rec2_x[0] or rec2_x[1] <= rec1_x[0]

        # x轴不重叠, 就是不重叠
        if x_not_overlap:
            return False

        # x重叠, 判断y轴
        rec1_y = (rec1[1], rec1[3])
        rec2_y = (rec1[1], rec1[3])

        y_not_overlap = rec1_y[1] <= rec2_y[0] or rec2_y[1] <= rec1_y[0]

        if y_not_overlap:
            return False

        return True

